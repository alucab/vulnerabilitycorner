const GSH_ID = "1Wk--S5xrii8-7QJsapKlqMfWYk7xPOzfnLDQc1msR4o";
const EPSS_GSH_ID = "15Y8v39ViK5tm7XN56Vmi0gx9G1PVagLEf8MA6tRslck"

const GSH_NVD_TAB = "NVD"
const GSH_KEV_TAB = "KEV"
const GSH_KEV_NVD_TAB = "NVD-KEV"
const GSH_KEV_NVD_EPSS_TAB="NVD-KEV-EPSS"

_ = LB.LD4()


const NVD_RESULTSPERPAGE = 200

const DATE = getSQLDate();

/* PREP PARENT FOLDER OBJECT */
/* (1) get the parent folder object */
const FOLDER =DriveApp.getFileById(ScriptApp.getScriptId()).getParents().next();
/* (2) print the parent_folder url for reference */
console.log('Script folder url:',FOLDER.getUrl());

function getSQLDate(){
  var today = new Date();
  var newEstimate = today.toISOString().slice(0, 10) //year +'-'+ month + '-' + date;
  Logger.log(newEstimate);
  return newEstimate
}

function fetchBlobFromUrl(url) {
  let config = {
    muteHttpExceptions: false
  };
  let response = UrlFetchApp.fetch(url, config);
  let blob = response.getBlob();
  blob.setContentTypeFromExtension()
  return blob;
}

function fetchUrl(url) {
	const response = UrlFetchApp.fetch(url, {
		"method": "GET",
		"headers": {
			"cache-control": "no-cache"
		},
		"muteHttpExceptions": true,
		"followRedirects": true,
		"validateHttpsCertificates": false,
	});

  Logger.log("fetchUrl - URL is %s", url);
	Logger.log("fetchUrl - Response code is %s", response.getResponseCode());

  if (response.getResponseCode()!=200){
    Logger.log("fetchUrl :", response.getContentText());
  }
  
  var data = response.getContentText();
  // return json;
  var json = JSON.parse(data);

  return json

}

// Returns the value at a given percentile in a sorted numeric array.
// "Linear interpolation between closest ranks" method
function percentile(arr, p) {
    if (arr.length === 0) return 0;
    if (typeof p !== 'number') throw new TypeError('p must be a number');
    if (p <= 0) return arr[0];
    if (p >= 1) return arr[arr.length - 1];

    var index = (arr.length - 1) * p,
        lower = Math.floor(index),
        upper = lower + 1,
        weight = index % 1;

    if (upper >= arr.length) return arr[lower];
    return arr[lower] * (1 - weight) + arr[upper] * weight;
}

// Returns the percentile of the given value in a sorted numeric array.
function percentRank(arr, v) {
    if (typeof v !== 'number') {
      //throw new TypeError('v must be a number');
      return -1
    }
    for (var i = 0, l = arr.length; i < l; i++) {
        if (v <= arr[i]) {
            while (i < l && v === arr[i]) i++;
            if (i === 0) return 0;
            if (v !== arr[i-1]) {
                i += (v - arr[i-1]) / (arr[i] - arr[i-1]);
            }
            return i / l;
        }
    }
    return 1;
}
