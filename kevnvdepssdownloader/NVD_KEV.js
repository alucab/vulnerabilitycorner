/*
const arr1 = [[1,2,3],[2,3,1],[3,2,1]]
const arr2 = [[1,4,5],[2,4,5],[3,4,5]]

idx1 = _.keyBy(arr1, 0) 
idx2 = _.keyBy(arr2, 0) 

function customizer(objValue, srcValue) {
  if (_.isArray(objValue)) {
    return _.uniq(objValue.concat(srcValue));
  }
}

obj = _.mergeWith(idx1, idx2, customizer);

result = _.values(obj)
*/

function mergeAll(){
  

  mergeNVDKEVSheet(GSH_ID)

  Utilities.sleep(10000)

  mergeNVDKEVEPSSSheet(GSH_ID,EPSS_GSH_ID)
}

function mergeNVDKEVSheet(spreadsheetId){
  if(spreadsheetId==null) spreadsheetId = GSH_ID

  const KEVSpreadSheet = SpreadsheetApp.openById(spreadsheetId);
  const NVDSheet = KEVSpreadSheet.getSheetByName(GSH_NVD_TAB);
  const NVDValues = NVDSheet.getDataRange().getValues()
  const KEVSheet = KEVSpreadSheet.getSheetByName(GSH_KEV_TAB);
  const KEVValues = KEVSheet.getRange(1,1,KEVSheet.getLastRow(),12).getValues();

  var idx1 = _.keyBy(KEVValues, 0) 
  for (const NVDScore of NVDValues){
    if(idx1.hasOwnProperty(NVDScore[0])){
      idx1[NVDScore[0]][10]=NVDScore[1];
      idx1[NVDScore[0]][11]=NVDScore[2];
    }
  }
  const mergedValues = _.values(idx1)

  const KEVNVDSheet = LB.checkSheet(GSH_KEV_NVD_TAB,spreadsheetId);
  KEVNVDSheet.clearContents();
  KEVNVDSheet.getRange(1,1,mergedValues.length,mergedValues[0].length).setValues(mergedValues);
}

function mergeNVDKEVEPSSSheet(spreadsheetId,epssSpreadsheetId){
  if(spreadsheetId==null) spreadsheetId = GSH_ID;
  if (epssSpreadsheetId==null) epssSpreadsheetId = EPSS_GSH_ID;
  

  const KEVSpreadSheet = SpreadsheetApp.openById(spreadsheetId);
  const KEVNVDSheet = KEVSpreadSheet.getSheetByName(GSH_KEV_NVD_TAB);
  var mergedValues = KEVNVDSheet.getRange(1,1,KEVNVDSheet.getLastRow(),15).getValues();
  
  mergedValues = _.keyBy(mergedValues, 0) 

  const epssSpreadSheet = SpreadsheetApp.openById(epssSpreadsheetId);
  const epssSheet = epssSpreadSheet.getSheetByName("EPSS")
  const epssValues = epssSheet.getDataRange().getValues()

  //I create this temporary array only to sort it and use it for 
  //KEVPercentile calculation
  var epssArrayForKEVPercentile = [];

  for (const epssRow of epssValues){
    if (mergedValues.hasOwnProperty(epssRow[0]) ){
      mergedValues[epssRow[0]][12]=epssRow[1];
      mergedValues[epssRow[0]][13]=epssRow[2];
      epssArrayForKEVPercentile.push(epssRow[1]);
    }
  }

  mergedValues = _.values(mergedValues)
  epssArrayForKEVPercentile.sort()

  const EPSSColNum = mergedValues[0].length-1-1
  mergedValues[0][14]="KEVPercentile"
  for (var i = 1;i<mergedValues.length;i++){
    //console.log(i)
    //console.log(mergedValues[i])
    mergedValues[i][14]=percentRank(epssArrayForKEVPercentile,mergedValues[i][EPSSColNum])
  }
  
  const KEVNVDEPSSSheet = LB.checkSheet(GSH_KEV_NVD_EPSS_TAB,spreadsheetId);
  KEVNVDEPSSSheet.clearContents();
  KEVNVDEPSSSheet.getRange(1,1,mergedValues.length,mergedValues[0].length).setValues(mergedValues);


}

function HighEPSSNotPresentInKEV(spreadsheetId,epssSpreadsheetId, epssMin){
  if(spreadsheetId==null) spreadsheetId = GSH_ID;
  if (epssSpreadsheetId==null) epssSpreadsheetId = EPSS_GSH_ID;
  if (epssMin==null) epssMin = 0.9;
  

  const KEVSpreadSheet = SpreadsheetApp.openById(spreadsheetId);

  const KEVSheet = KEVSpreadSheet.getSheetByName(GSH_KEV_TAB);
  const KEVValues = KEVSheet.getDataRange().getValues()
  var idx1 = _.keyBy(KEVValues, 0) 

  const epssSpreadSheet = SpreadsheetApp.openById(epssSpreadsheetId);
  const epssSheet = epssSpreadSheet.getSheetByName("EPSS")

  const epssValues = epssSheet.getDataRange().getValues()

  let filtered_epssValues = _.filter(
    epssValues, function (o) {
        return o[1]>=0.9 && !idx1.hasOwnProperty(o[0])
    }
  );

  filtered_epssValues= _.sortBy(filtered_epssValues, [function(o) { return -o[1]; }]); //-o[1] to sort desc
  
  const KEVNVDEPSSSheet = LB.checkSheet("HIGH-EPSS-NOT-KEV",spreadsheetId);
  KEVNVDEPSSSheet.clearContents();
  KEVNVDEPSSSheet.getRange(1,1,filtered_epssValues.length,filtered_epssValues[0].length).setValues(filtered_epssValues);


}
