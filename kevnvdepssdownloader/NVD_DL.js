


function trigger_loadNVDKEVSheet(triggerInfo){
  Logger.log("Trigger Info:%s",triggerInfo)
  loadNVDKEVSheet(GSH_ID, GSH_NVD_TAB)
  return 
}

function loadNVDKEVSheet(spreadsheetId, tabName){
  if(spreadsheetId==null) spreadsheetId = GSH_ID
  if(tabName==null) tabName = GSH_NVD_TAB

  Logger.log("Spreadsheet:%s",spreadsheetId)
  Logger.log("Spreadsheet Tab:%s",tabName)

  /*var startIndex = 0 ;
  var endIndex = RESULTSPERPAGE -1 ;
  var jsonFileName = DATE+"_"+ GSH_TAB + "_" + startIndex+ "_" + endIndex + ".json" 

  Logger.log("loadNVDKEV - jsonFileName - %s", jsonFileName);

  var json=fetchNVDKEV(startIndex)

  // Declares the content type of the blob.
  const contentType = 'application/json';

  // Create a blob object from the string, content type, and name.
  const blob = Utilities.newBlob(JSON.stringify(json), contentType, jsonFileName);

  if (!FOLDER.getFilesByName(jsonFileName).hasNext()){
    jsonFile=DriveApp.createFile(blob);
    console.log('jsonFile url:',jsonFile.getUrl())
    jsonFile.moveTo(FOLDER);
  } else{
    console.log('error: jsonFile already exist : ' + jsonFileName);
  }*/
  
  //score 3.1 $.vulnerabilities[*].cve.metrics.cvssMetricV31[?(@.type=="Primary")].cvssData.baseScore
  //score 2 $.vulnerabilities[*].cve.metrics.cvssMetricV2[?(@.type=="Primary")].cvssData.baseScore
/*
, metrics.cvssMetricV30[?(@.type=="Primary")].cvssData.baseScore, metrics.cvssMetricV31[?(@.type=="Primary")].cvssData.baseScore
 */

  var URL_T="https://services.nvd.nist.gov/rest/json/cves/2.0?hasKev&resultsPerPage=100&startIndex="
  
  var LENGTH_TO_EXTRACT = "$.totalResults"

  var BASE_PATH = "$.vulnerabilities[*].cve"
  var COLUMNS_TO_EXTRACT = [
    'id',
    'metrics.cvssMetricV2[0].cvssData.baseScore',
    'metrics.cvssMetricV30[0].cvssData.baseScore',
    'metrics.cvssMetricV31[0].cvssData.baseScore',
  ]

  IMPORTJSONAPI.ADD_PARAM_TYPE("apiKey",'string')

  var length = IMPORTJSONAPI.IMPORTJSONAPI(
    URL_T+0, 
    LENGTH_TO_EXTRACT, 
    "@",
    "apiKey=fc50bcf7-5d14-48bd-b31d-d61041e93fc5") [0][0]

  var numCalls = Math.ceil(length/NVD_RESULTSPERPAGE)
  var scoresValues = [['CVE','CVSS2','CVSS3','CVSS3x']]
  for (var i = 0; i<numCalls;i++){
    var x = IMPORTJSONAPI.IMPORTJSONAPI(
      URL_T+(i*NVD_RESULTSPERPAGE), 
      BASE_PATH, 
      COLUMNS_TO_EXTRACT.join(','),
      "apiKey=fc50bcf7-5d14-48bd-b31d-d61041e93fc5") 

    scoresValues = scoresValues.concat(x);
  }

  for (var i = 0; i< scoresValues.length ; i++){
    var row = scoresValues[i];
    if (row[3] != null && row[3] != ""  ) {
      row[2] = row[3]
    }
    row.splice(-1)
  }

  //var x = IMPORTJSONAPI.IMPORTJSONAPI("https://services.nvd.nist.gov/rest/json/cves/2.0/?hasKev&resultsPerPage=10&startIndex=0","$","@")
  //var x = IMPORTJSONAPI.IMPORTJSONAPI("https://services.nvd.nist.gov/rest/json/cves/2.0/?hasKev&resultsPerPage=10&startIndex=0","$","@","shorten_literals=true")

  //var x = IMPORTJSONAPI.IMPORTJSONAPI("https://services.nvd.nist.gov/rest/json/cves/2.0/?hasKev&resultsPerPage=10&startIndex=0","$","@")
  
  //console.log(scoresValues);

  //var jx = JSON.parse(x[0][0]);
  //var l = IMPORTJSONAPI.QUERYJSON(jx,"$.totalResults","@")
  //console.log('l:' + l);

  KEVSpreadSheet = SpreadsheetApp.openById(spreadsheetId);
  NVDSheet = KEVSpreadSheet.getSheetByName(tabName);

  NVDSheet.clearContents();
  NVDSheet.getRange(1,1,scoresValues.length,scoresValues[0].length).setValues(scoresValues);

  return
}



function fetchNVDKEV(startIndex){
  const KEV_URL = `https://services.nvd.nist.gov/rest/json/cves/2.0/?hasKev&resultsPerPage=${RESULTSPERPAGE}&startIndex=${startIndex}`;
  var json = fetchUrl(KEV_URL);
  return json;
}



